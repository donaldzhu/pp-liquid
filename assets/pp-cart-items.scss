@use './scss/typography' as *;
@use './scss/layout' as *;

.pp-cart-items {
  .pp-cart-items-title {
    @include breakpoint-value(--padding-top, 14rem, 8rem, 3rem);
    @include main-container(var(--padding-top), var(--pp-y-padding));

    h1 {
      @include pp-body-type;
      @include flex(space-between);
      margin: 0;
    }
  }

  &.is-empty {
    padding: 25rem 0;

    .pp-cart-items-title {
      display: none;
    }

    .cart__warnings {
      @include flex;
      flex-direction: column;

      h1 {
        @include pp-heading-type;
      }

      button {
        @include breakpoint-value(--margin-top, 10rem, 4rem, 2rem);
        width: fit-content;
        margin-top: var(--margin-top);
      }
    }
  }

  .cart__items {
    border: none;

  }


  @include breakpoint-value(--image-width-vw, 15vw, 100vw, 100vw);
  @include breakpoint-value(--image-width-px, 35px, 0px, 0px);
  $image-width: calc(var(--image-width-vw) + var(--image-width-px));


  table.pp-cart-items-table {

    & tbody,
    & tr,
    & td {
      border: none;
      box-shadow: none;


      a {
        text-decoration: none;

        &,
        & div,
        & h4 {
          @include pp-body-type;
        }
      }
    }

    tr {
      @include flex(flex-start, flex-end);
      @include breakpoint-value(--tr-gap, 3.5rem, 0, 0);
      @include breakpoint-value(--tr-flex-wrap, nowrap, wrap, wrap);
      $image-height: calc(#{$image-width} / var(--aspect-ratio));
      @include breakpoint-value(--tr-height, $image-height, auto, auto);

      width: 100vw;
      height: var(--tr-height);
      gap: var(--tr-gap);
      flex-wrap: var(--tr-flex-wrap);

      td.pp-cart-item-image {
        height: $image-height;
      }

      &:not(:first-child) {
        @include breakpoint-value(--margin-top, 4rem, 0, 0);
        margin-top: var(--margin-top);
      }

      @mixin non-desktop-layout {
        td:not(:first-child) {
          height: 5rem;
          align-items: flex-start;
          margin-top: 2rem;
        }
      }

      @media #{$tablet} {
        @include non-desktop-layout;
      }

      @media #{$mobile} {
        @include non-desktop-layout;
      }
    }

    td {
      @include flex(center, flex-end);
      flex-direction: row;
      height: fit-content;

      h4,
      p {
        margin: 0;
      }

      &.pp-cart-item-price {
        justify-content: flex-end;
      }

      &.pp-cart-item-quantity {
        justify-content: flex-start;
      }
    }

    td.pp-cart-item-details {
      height: 100%;
    }


  }

  td.pp-cart-item-image {
    padding-top: 0;
    flex-shrink: 0;
    width: $image-width;

    a {
      display: flex;
      width: fit-content;
      height: fit-content;
    }

    img {
      width: 100%;
      max-width: none;
    }
  }

  td.pp-cart-item-details {
    @include breakpoint-value(--margin-left, 0, $x-padding-tablet, $x-padding-mobile);
    margin-left: var(--margin-left);
    margin-right: auto;
    padding: 0;
    width: auto;

    p {
      margin-top: 0.25rem;
    }

    .cart-item__name:hover {
      text-decoration: none;
    }

    a:hover {
      text-decoration: underline;
    }
  }


  td.pp-cart-item-quantity {
    @include breakpoint-value(--quantity-width, $cart-quantity-desktop-width, $cart-quantity-tablet-width, $cart-quantity-mobile-width);

    padding: 0;
    width: var(--quantity-width);
    flex: none;

    .quantity-popover-container {
      padding: 0;

      quantity-popover {
        width: fit-content;
      }

      quantity-input {
        @mixin non-desktop-layout {

          button,
          input,
          span {
            height: calc(var(--pp-font-body-size) * 1.12);
          }

          button.quantity__button {
            position: relative;
            top: -0.2rem;
            width: fit-content;
          }

          input.quantity__input {
            padding: 0;
          }
        }

        @media #{$tablet} {
          @include non-desktop-layout;
        }

        @media #{$mobile} {
          @include non-desktop-layout;
        }

        &.quantity {
          @include breakpoint-value(--quantity-input-width, calc(14rem / var(--font-body-scale) + var(--inputs-border-width)* 2), 10rem, 7.5rem);
          min-height: auto;
          width: var(--quantity-input-width);
        }

        &::before,
        &::after {
          content: '';
          display: none;
        }

        button,
        input {
          @include pp-body-type;
        }

        input.quantity__input:focus-visible {
          outline: none;
          box-shadow: none;
        }

        .svg-wrapper {
          @include breakpoint-value(--svg-wrapper-padding-bottom, 0.5rem, 0, 0);
          font-size: 4rem;
          padding-bottom: var(--svg-wrapper-padding-bottom);
        }
      }
    }

    .cart-item__error {
      margin: 0;
      @include pp-body-type;

      .svg-wrapper {
        @include breakpoint-value(--cart-item-error-icon-size, 1.5rem, 1rem, 1rem);
        width: var(--cart-item-error-icon-size);
        height: var(--cart-item-error-icon-size);
      }

      position: absolute;
      padding-top: 1.25rem;
    }
  }

  td.pp-cart-item-price {
    @include breakpoint-value(--margin-left, 0, 0, 0);
    @include breakpoint-value(--min-width, $cart-price-desktop-width, $cart-price-non-desktop-width, $cart-price-non-desktop-width);
    margin-left: var(--margin-left);
    margin-right: var(--pp-x-padding);

    padding: 0;
    min-width: var(--min-width);
    flex: none;

    span {
      @include pp-body-type;
    }

    .loading__spinner {
      @include breakpoint-value(--loading-spinner-top, auto, 0, 0);
      padding-top: 0;
      top: var(--loading-spinner-top);
      height: 18px;
    }
  }
}